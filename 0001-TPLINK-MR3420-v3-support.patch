From 3edcbeaa43907c2f6773508ae767874a313bb70a Mon Sep 17 00:00:00 2001
From: Jacek Trzcinski <jacek@mgt.pl>
Date: Tue, 1 Nov 2016 01:02:35 +0100
Subject: [PATCH] TPLINK MR3420 v3 support

Notes: 1. adds new kernel module leds-tl-mr3420-v3.ko providing support
          for non-gpio controlled LEDs
       2. USB modems support not tested

Signed-off-by: Jacek Trzcinski <jacek@mgt.pl>
---
 target/linux/ar71xx/base-files/etc/board.d/01_leds |   2 +
 .../linux/ar71xx/base-files/etc/board.d/02_network |   1 +
 target/linux/ar71xx/base-files/etc/diag.sh         |   1 +
 target/linux/ar71xx/base-files/lib/ar71xx.sh       |   3 +
 .../ar71xx/base-files/lib/upgrade/platform.sh      |   1 +
 target/linux/ar71xx/config-4.4                     |   1 +
 .../ar71xx/files/arch/mips/ath79/Kconfig.openwrt   |  10 +
 target/linux/ar71xx/files/arch/mips/ath79/Makefile |   1 +
 .../files/arch/mips/ath79/mach-tl-mr3420-v3.c      | 144 +++++++++
 .../linux/ar71xx/files/arch/mips/ath79/machtypes.h |   1 +
 .../ar71xx/files/drivers/leds/leds-tl-mr3420-v3.c  | 323 +++++++++++++++++++++
 target/linux/ar71xx/image/tp-link.mk               |  12 +-
 target/linux/ar71xx/mikrotik/config-default        |   1 +
 target/linux/ar71xx/modules.mk                     |  17 ++
 target/linux/ar71xx/nand/config-default            |   1 +
 .../442-leds-tl-mr3420-v3-led-driver.patch         |  27 ++
 16 files changed, 545 insertions(+), 1 deletion(-)
 create mode 100644 target/linux/ar71xx/files/arch/mips/ath79/mach-tl-mr3420-v3.c
 create mode 100644 target/linux/ar71xx/files/drivers/leds/leds-tl-mr3420-v3.c
 create mode 100644 target/linux/ar71xx/patches-4.4/442-leds-tl-mr3420-v3-led-driver.patch

diff --git a/target/linux/ar71xx/base-files/etc/board.d/01_leds b/target/linux/ar71xx/base-files/etc/board.d/01_leds
index a32ca91..4969396 100755
--- a/target/linux/ar71xx/base-files/etc/board.d/01_leds
+++ b/target/linux/ar71xx/base-files/etc/board.d/01_leds
@@ -532,6 +532,7 @@ tl-wr941nd-v6)
 	ucidef_set_led_switch "lan4" "LAN4" "tp-link:blue:lan4" "switch0" "0x02"
 	ucidef_set_led_wlan "wlan" "WLAN" "tp-link:blue:wlan" "phy0tpt"
 	;;
+tl-mr3420-v3|\
 tl-wr841n-v9|\
 tl-wr841n-v11|\
 tl-wr842n-v3)
@@ -543,6 +544,7 @@ tl-wr842n-v3)
 	ucidef_set_led_wlan "wlan" "WLAN" "tp-link:green:wlan" "phy0tpt"
 
 	case "$board" in
+	tl-mr3420-v3|\
 	tl-wr842n-v3)
 		ucidef_set_led_usbdev "usb" "USB" "tp-link:green:3g" "1-1"
 		;;
diff --git a/target/linux/ar71xx/base-files/etc/board.d/02_network b/target/linux/ar71xx/base-files/etc/board.d/02_network
index 1cb6b4c..6797ee9 100755
--- a/target/linux/ar71xx/base-files/etc/board.d/02_network
+++ b/target/linux/ar71xx/base-files/etc/board.d/02_network
@@ -40,6 +40,7 @@ ar71xx_setup_interfaces()
 	tl-mr3220|\
 	tl-mr3220-v2|\
 	tl-mr3420|\
+	tl-mr3420-v3|\
 	tl-wdr3320-v2|\
 	tl-wdr3500|\
 	tl-wr741nd|\
diff --git a/target/linux/ar71xx/base-files/etc/diag.sh b/target/linux/ar71xx/base-files/etc/diag.sh
index 475cb80..087f300 100644
--- a/target/linux/ar71xx/base-files/etc/diag.sh
+++ b/target/linux/ar71xx/base-files/etc/diag.sh
@@ -317,6 +317,7 @@ get_status_led() {
 	tl-mr3220-v2|\
 	tl-mr3420|\
 	tl-mr3420-v2|\
+	tl-mr3420-v3|\
 	tl-wa701nd-v2|\
 	tl-wa801nd-v2|\
 	tl-wa901nd|\
diff --git a/target/linux/ar71xx/base-files/lib/ar71xx.sh b/target/linux/ar71xx/base-files/lib/ar71xx.sh
index f51d7db..0296476 100755
--- a/target/linux/ar71xx/base-files/lib/ar71xx.sh
+++ b/target/linux/ar71xx/base-files/lib/ar71xx.sh
@@ -928,6 +928,9 @@ ar71xx_board_detect() {
 	*"TL-MR3420 v2")
 		name="tl-mr3420-v2"
 		;;
+	*"TL-MR3420 v3")
+		name="tl-mr3420-v3"
+		;;
 	*"TL-WA701ND v2")
 		name="tl-wa701nd-v2"
 		;;
diff --git a/target/linux/ar71xx/base-files/lib/upgrade/platform.sh b/target/linux/ar71xx/base-files/lib/upgrade/platform.sh
index 9c0f3f3..a9c9ca5 100755
--- a/target/linux/ar71xx/base-files/lib/upgrade/platform.sh
+++ b/target/linux/ar71xx/base-files/lib/upgrade/platform.sh
@@ -348,6 +348,7 @@ platform_check_image() {
 	tl-mr3220-v2|\
 	tl-mr3220|\
 	tl-mr3420-v2|\
+	tl-mr3420-v3|\
 	tl-mr3420|\
 	tl-wa701nd-v2|\
 	tl-wa7210n-v2|\
diff --git a/target/linux/ar71xx/config-4.4 b/target/linux/ar71xx/config-4.4
index 4e3f5a4..2bd41dc 100644
--- a/target/linux/ar71xx/config-4.4
+++ b/target/linux/ar71xx/config-4.4
@@ -151,6 +151,7 @@ CONFIG_ATH79_MACH_TL_MR11U=y
 CONFIG_ATH79_MACH_TL_MR13U=y
 CONFIG_ATH79_MACH_TL_MR3020=y
 CONFIG_ATH79_MACH_TL_MR3X20=y
+CONFIG_ATH79_MACH_TL_MR3420_V3=y
 CONFIG_ATH79_MACH_TL_WA701ND_V2=y
 CONFIG_ATH79_MACH_TL_WA7210N_V2=y
 CONFIG_ATH79_MACH_TL_WA801ND_V3=y
diff --git a/target/linux/ar71xx/files/arch/mips/ath79/Kconfig.openwrt b/target/linux/ar71xx/files/arch/mips/ath79/Kconfig.openwrt
index 86df292..4161d46 100644
--- a/target/linux/ar71xx/files/arch/mips/ath79/Kconfig.openwrt
+++ b/target/linux/ar71xx/files/arch/mips/ath79/Kconfig.openwrt
@@ -1234,6 +1234,16 @@ config ATH79_MACH_TL_MR3X20
 	select ATH79_DEV_M25P80
 	select ATH79_DEV_USB
 
+config ATH79_MACH_TL_MR3420_V3
+	bool "TP-LINK TL-MR3420 v3 support"
+	select SOC_QCA953X
+	select ATH79_DEV_AP9X_PCI if PCI
+	select ATH79_DEV_ETH
+	select ATH79_DEV_GPIO_BUTTONS
+	select ATH79_DEV_LEDS_GPIO
+	select ATH79_DEV_M25P80
+	select ATH79_DEV_USB
+
 config ATH79_MACH_TL_WAX50RE
 	bool "TP-LINK TL-WA750/850RE support"
 	select SOC_AR934X
diff --git a/target/linux/ar71xx/files/arch/mips/ath79/Makefile b/target/linux/ar71xx/files/arch/mips/ath79/Makefile
index 4b927bc..5c7b12f 100644
--- a/target/linux/ar71xx/files/arch/mips/ath79/Makefile
+++ b/target/linux/ar71xx/files/arch/mips/ath79/Makefile
@@ -157,6 +157,7 @@ obj-$(CONFIG_ATH79_MACH_TL_MR11U)		+= mach-tl-mr11u.o
 obj-$(CONFIG_ATH79_MACH_TL_MR13U)		+= mach-tl-mr13u.o
 obj-$(CONFIG_ATH79_MACH_TL_MR3020)		+= mach-tl-mr3020.o
 obj-$(CONFIG_ATH79_MACH_TL_MR3X20)		+= mach-tl-mr3x20.o
+obj-$(CONFIG_ATH79_MACH_TL_MR3420_V3)		+= mach-tl-mr3420-v3.o
 obj-$(CONFIG_ATH79_MACH_TL_WA701ND_V2)		+= mach-tl-wa701nd-v2.o
 obj-$(CONFIG_ATH79_MACH_TL_WA7210N_V2)		+= mach-tl-wa7210n-v2.o
 obj-$(CONFIG_ATH79_MACH_TL_WA801ND_V3)		+= mach-tl-wa801nd-v3.o
diff --git a/target/linux/ar71xx/files/arch/mips/ath79/mach-tl-mr3420-v3.c b/target/linux/ar71xx/files/arch/mips/ath79/mach-tl-mr3420-v3.c
new file mode 100644
index 0000000..4c2147c
--- /dev/null
+++ b/target/linux/ar71xx/files/arch/mips/ath79/mach-tl-mr3420-v3.c
@@ -0,0 +1,144 @@
+/*
+ * TPLINK MR-3420 v3
+ *  Copyright (C) 2016 Jacek Trzcinski <jacek@mgt.pl>
+ *
+ *  Based on file mach-tl-wr841n-v9.c:
+ *  	TP-LINK TL-WR841N/ND v9/v11 / TL-WR842N/ND v3
+ *
+ *  	Copyright (C) 2014 Matthias Schiffer <mschiffer@universe-factory.net>
+ *  	Copyright (C) 2016 Cezary Jackiewicz <cezary@eko.one.pl>
+ *  	Copyright (C) 2016 Stijn Segers <francesco.borromini@gmail.com>
+ *
+ *
+ *  This program is free software; you can redistribute it and/or modify it
+ *  under the terms of the GNU General Public License version 2 as published
+ *  by the Free Software Foundation.
+ */
+
+#include <linux/gpio.h>
+#include <linux/platform_device.h>
+
+#include <asm/mach-ath79/ath79.h>
+#include <asm/mach-ath79/ar71xx_regs.h>
+
+#include "common.h"
+#include "dev-eth.h"
+#include "dev-gpio-buttons.h"
+#include "dev-leds-gpio.h"
+#include "dev-m25p80.h"
+#include "dev-usb.h"
+#include "dev-wmac.h"
+#include "machtypes.h"
+
+#define DRIVER_NAME	"leds-tl-mr3420-v3"   // see also driver file 'leds-tl-mr3420-v3.c'
+
+#define TL_MR3420V3_GPIO_USB_POWER	0
+#define TL_MR3420V3_GPIO_LED_SYSTEM	1
+#define TL_MR3420V3_GPIO_LED_QSS	3
+
+#define TL_MR3420V3_GPIO_BTN_RESET	12
+#define TL_MR3420V3_GPIO_BTN_WIFI	17
+
+#define TL_MR3420V3_KEYS_POLL_INTERVAL	20	/* msecs */
+#define TL_MR3420V3_KEYS_DEBOUNCE_INTERVAL (3 * TL_MR3420V3_KEYS_POLL_INTERVAL)
+
+
+static const char *tl_mr3420_v3_part_probes[] = {
+	"tp-link",
+	NULL,
+};
+
+static struct flash_platform_data tl_mr3420_v3_flash_data = {
+	.part_probes	= tl_mr3420_v3_part_probes,
+};
+
+// directly gpio-driven LEDs definition
+static struct gpio_led tl_mr3420_v3_leds_gpio[] __initdata = {
+	{
+		.name		= "tp-link:green:system",
+		.gpio		= TL_MR3420V3_GPIO_LED_SYSTEM,
+		.active_low	= 1,
+	}, {
+		.name		= "tp-link:green:qss",
+		.gpio		= TL_MR3420V3_GPIO_LED_QSS,
+		.active_low	= 1,
+	},
+};
+
+static struct gpio_keys_button tl_mr3420_v3_gpio_keys[] __initdata = {
+	{
+		.desc		= "Reset button",
+		.type		= EV_KEY,
+		.code		= KEY_RESTART,
+		.debounce_interval = TL_MR3420V3_KEYS_DEBOUNCE_INTERVAL,
+		.gpio		= TL_MR3420V3_GPIO_BTN_RESET,
+		.active_low	= 1,
+	}, {
+		.desc		= "WIFI button",
+		.type		= EV_KEY,
+		.code		= KEY_RFKILL,
+		.debounce_interval = TL_MR3420V3_KEYS_DEBOUNCE_INTERVAL,
+		.gpio		= TL_MR3420V3_GPIO_BTN_WIFI,
+		.active_low	= 1,
+	}
+};
+
+
+static void __init tl_ap143_setup(void)
+{
+	u8 *mac = (u8 *) KSEG1ADDR(0x1f01fc00);
+	u8 *ee = (u8 *) KSEG1ADDR(0x1fff1000);
+	u8 tmpmac[ETH_ALEN];
+
+	ath79_register_m25p80(&tl_mr3420_v3_flash_data);
+
+	ath79_setup_ar933x_phy4_switch(false, false);
+
+	ath79_register_mdio(0, 0x0);
+
+	/* LAN */
+	ath79_eth1_data.phy_if_mode = PHY_INTERFACE_MODE_GMII;
+	ath79_eth1_data.duplex = DUPLEX_FULL;
+	ath79_switch_data.phy_poll_mask |= BIT(4);
+	ath79_init_mac(ath79_eth1_data.mac_addr, mac, 0);
+	ath79_register_eth(1);
+
+	/* WAN */
+	ath79_switch_data.phy4_mii_en = 1;
+	ath79_eth0_data.phy_if_mode = PHY_INTERFACE_MODE_MII;
+	ath79_eth0_data.duplex = DUPLEX_FULL;
+	ath79_eth0_data.speed = SPEED_100;
+	ath79_eth0_data.phy_mask = BIT(4);
+	ath79_init_mac(ath79_eth0_data.mac_addr, mac, 1);
+	ath79_register_eth(0);
+
+	ath79_init_mac(tmpmac, mac, 0);
+	ath79_register_wmac(ee, tmpmac);
+}
+
+static void __init tl_mr3420_v3_usb_setup(void) {
+	/* enable power for the USB port */
+	gpio_request_one(TL_MR3420V3_GPIO_USB_POWER,
+			 GPIOF_OUT_INIT_HIGH | GPIOF_EXPORT_DIR_FIXED,
+			 "USB power");
+	ath79_register_usb();
+}
+
+
+static void __init tl_mr3420_v3_setup(void) {
+	tl_ap143_setup();
+
+	ath79_register_leds_gpio(-1, ARRAY_SIZE(tl_mr3420_v3_leds_gpio),
+				 tl_mr3420_v3_leds_gpio);
+
+	ath79_register_gpio_keys_polled(1, TL_MR3420V3_KEYS_POLL_INTERVAL,
+					ARRAY_SIZE(tl_mr3420_v3_gpio_keys),
+					tl_mr3420_v3_gpio_keys);
+	tl_mr3420_v3_usb_setup();
+
+	// register driver for the rest of the LEDs
+	platform_device_register_simple(DRIVER_NAME, -1, NULL, 0);
+}
+
+MIPS_MACHINE(ATH79_MACH_TL_MR3420_V3, "TL-MR3420-v3", "TP-LINK TL-MR3420 v3",
+	     tl_mr3420_v3_setup);
diff --git a/target/linux/ar71xx/files/arch/mips/ath79/machtypes.h b/target/linux/ar71xx/files/arch/mips/ath79/machtypes.h
index 1243409..99bdc76 100644
--- a/target/linux/ar71xx/files/arch/mips/ath79/machtypes.h
+++ b/target/linux/ar71xx/files/arch/mips/ath79/machtypes.h
@@ -180,6 +180,7 @@ enum ath79_mach_type {
 	ATH79_MACH_TL_MR3220_V2,		/* TP-LINK TL-MR3220 v2 */
 	ATH79_MACH_TL_MR3420,			/* TP-LINK TL-MR3420 */
 	ATH79_MACH_TL_MR3420_V2,		/* TP-LINK TL-MR3420 v2 */
+	ATH79_MACH_TL_MR3420_V3,		/* TP-LINK TL-MR3420 v3 */
 	ATH79_MACH_TL_WA701ND_V2,		/* TP-LINK TL-WA701ND v2 */
 	ATH79_MACH_TL_WA7210N_V2,		/* TP-LINK TL-WA7210N v2 */
 	ATH79_MACH_TL_WA750RE,			/* TP-LINK TL-WA750RE */
diff --git a/target/linux/ar71xx/files/drivers/leds/leds-tl-mr3420-v3.c b/target/linux/ar71xx/files/drivers/leds/leds-tl-mr3420-v3.c
new file mode 100644
index 0000000..9b13d62
--- /dev/null
+++ b/target/linux/ar71xx/files/drivers/leds/leds-tl-mr3420-v3.c
@@ -0,0 +1,323 @@
+/*
+ *  USB LED driver for the TPLINK MR3420 v3
+ *
+ *  Copyright (C) 2009 Jacek Trzcinski <jt@mgt.pl>
+ *
+ *  This program is free software; you can redistribute it and/or modify it
+ *  under the terms of the GNU General Public License version 2 as published
+ *  by the Free Software Foundation.
+ */
+
+#include <linux/leds.h>
+#include <linux/gpio.h>
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/platform_device.h>
+
+#define DRIVER_NAME	"leds-tl-mr3420-v3"
+
+
+#define TL_MR3420_V3_GPIO11_LATCH_OE	11
+#define TL_MR3420_V3_GPIO16_SHFT_IN	16
+#define TL_MR3420_V3_GPIO15_SHFT_CLK	15
+#define TL_MR3420_V3_GPIO14_SHFT_RST	14
+#define TL_MR3420_V3_GPIO13_LATCH_CLK	13
+
+
+/*
+NOTE: the order of the LAN LEDs has been inversed to see 'on' state
+      when respective RJ45 "behind LED" is connected
+      and now is as following:
+	pwr/status	wlan	lan4	lan3	lan2	lan1	3g	qss
+
+
+  74hc595 chip
+                  _________        _________   hi bit              LED   (all active low - except wan)
+        input ---|         |------|         |------QA                lan4
+    (gpio 16)    |         |------|         |------QB                lan3
+                 | shift   |------| latch   |------QC  parallel      lan2
+                 |register |------|         |------QD     data       lan1
+                 |         |------|         |------QE     output     wan    dual color 2pin LED  (color
+                 |         |------|         |------QF                wan       controlled with  QE,QF state)
+                 |         |------|         |------QG                wlan
+        shift    |         |------|         |------QH                3g
+         clock --|>        |    --|>        |  lo bit
+    (gpio 15)    |_________|--  | |_________|
+                      o      |  |       o
+(gpio 14) reset ______|      |  |       |
+(gpio 13) latch clk _________+__|       |
+(gpio 11) output enable _____+__________|
+                             |
+                             |___________________ ser data out
+
+
+*/
+
+static uint8_t tl_mr3420_v3_latch_state;
+
+#define TL_MR3420_V3_LED_LAN4		0x7F
+#define TL_MR3420_V3_LED_LAN3		0xBF
+#define TL_MR3420_V3_LED_LAN2		0xDF
+#define TL_MR3420_V3_LED_LAN1		0xEF
+#define TL_MR3420_V3_LED_WAN_GREEN	0xF7	//--->F3
+#define TL_MR3420_V3_LED_WAN_RED	0xFB	//--->F3
+#define TL_MR3420_V3_LED_WLAN		0xFD
+#define TL_MR3420_V3_LED_3G		0xFE
+
+
+static void tl_mr3420_v3_set_leds(uint8_t led_bits) {   // bit val 0  <----> repective LED 'on'
+ uint8_t ii;
+
+   tl_mr3420_v3_latch_state = led_bits;
+
+   // clear shift register
+   gpio_set_value(TL_MR3420_V3_GPIO14_SHFT_RST, 0);
+   gpio_set_value(TL_MR3420_V3_GPIO14_SHFT_RST, 1);
+
+   for(ii = 1; ii != 0 ; ii = ii << 1) {
+      // set input pin state
+      if(tl_mr3420_v3_latch_state & ii) {
+         gpio_set_value(TL_MR3420_V3_GPIO16_SHFT_IN, 1);
+      }
+      else {
+         gpio_set_value(TL_MR3420_V3_GPIO16_SHFT_IN, 0);
+      }
+
+      // enter into shift reg
+      gpio_set_value(TL_MR3420_V3_GPIO15_SHFT_CLK, 1);
+      gpio_set_value(TL_MR3420_V3_GPIO15_SHFT_CLK, 0);
+   }
+
+   // set latch
+   gpio_set_value(TL_MR3420_V3_GPIO13_LATCH_CLK, 1);
+   gpio_set_value(TL_MR3420_V3_GPIO13_LATCH_CLK, 0);
+
+   gpio_set_value(TL_MR3420_V3_GPIO16_SHFT_IN, 0);        // 'normalize' input pin state
+}
+
+static void tl_mr3420_v3_clr_leds(void) {
+   gpio_set_value(TL_MR3420_V3_GPIO11_LATCH_OE, 1);       // disable output
+   gpio_set_value(TL_MR3420_V3_GPIO14_SHFT_RST, 0);       // set 'reset' of shift register
+
+   // normalize input, shft clk & latch clk
+   gpio_set_value(TL_MR3420_V3_GPIO16_SHFT_IN, 0);
+   gpio_set_value(TL_MR3420_V3_GPIO13_LATCH_CLK, 0);
+   gpio_set_value(TL_MR3420_V3_GPIO15_SHFT_CLK, 0);
+
+   gpio_set_value(TL_MR3420_V3_GPIO14_SHFT_RST, 1);       // remove 'reset' state of shift register
+
+   // clear all LEDs
+   tl_mr3420_v3_latch_state = 0xFF;
+   tl_mr3420_v3_set_leds(tl_mr3420_v3_latch_state);
+
+   gpio_set_value(TL_MR3420_V3_GPIO11_LATCH_OE, 0);       // enable output
+}
+
+
+
+/*     3G    */
+static void tl_mr3420_v3_led_3g_set(struct led_classdev *cdev, enum led_brightness brightness) {
+	if(brightness) tl_mr3420_v3_set_leds(tl_mr3420_v3_latch_state & TL_MR3420_V3_LED_3G);
+	else tl_mr3420_v3_set_leds(tl_mr3420_v3_latch_state | (~TL_MR3420_V3_LED_3G));
+}
+
+static enum led_brightness tl_mr3420_v3_led_3g_get(struct led_classdev *cdev) {
+	return( (~(tl_mr3420_v3_latch_state | TL_MR3420_V3_LED_3G)) != 0 ?  LED_FULL : LED_OFF);
+}
+
+static struct led_classdev tl_mr3420_v3_led_3g = {
+	.name = "tp-link:green:3g",
+	.brightness_set = tl_mr3420_v3_led_3g_set,
+	.brightness_get = tl_mr3420_v3_led_3g_get,
+};
+
+
+/*     WAN green   */
+static void tl_mr3420_v3_led_wan_green_set(struct led_classdev *cdev, enum led_brightness brightness) {
+	if(brightness) tl_mr3420_v3_set_leds((tl_mr3420_v3_latch_state &  TL_MR3420_V3_LED_WAN_GREEN ) | (~TL_MR3420_V3_LED_WAN_RED));
+	else           tl_mr3420_v3_set_leds((tl_mr3420_v3_latch_state | (~TL_MR3420_V3_LED_WAN_GREEN) ));
+
+}
+
+static enum led_brightness tl_mr3420_v3_led_wan_green_get(struct led_classdev *cdev) {
+	return( (~(tl_mr3420_v3_latch_state | TL_MR3420_V3_LED_WAN_GREEN)) != 0 ?  LED_FULL : LED_OFF);
+}
+
+static struct led_classdev tl_mr3420_v3_led_wan_green = {
+	.name = "tp-link:green:wan",
+	.brightness_set = tl_mr3420_v3_led_wan_green_set,
+	.brightness_get = tl_mr3420_v3_led_wan_green_get,
+};
+
+
+/*     WAN red   */
+static void tl_mr3420_v3_led_wan_red_set(struct led_classdev *cdev, enum led_brightness brightness) {
+	if(brightness) tl_mr3420_v3_set_leds((tl_mr3420_v3_latch_state | (~TL_MR3420_V3_LED_WAN_GREEN )) & TL_MR3420_V3_LED_WAN_RED );
+	else           tl_mr3420_v3_set_leds((tl_mr3420_v3_latch_state | (~TL_MR3420_V3_LED_WAN_RED   )) );
+}
+
+static enum led_brightness tl_mr3420_v3_led_wan_red_get(struct led_classdev *cdev) {
+	return( (~(tl_mr3420_v3_latch_state | TL_MR3420_V3_LED_WAN_RED)) != 0 ?  LED_FULL : LED_OFF);
+}
+
+static struct led_classdev tl_mr3420_v3_led_wan_red = {
+	.name = "tp-link:red:wan",
+	.brightness_set = tl_mr3420_v3_led_wan_red_set,
+	.brightness_get = tl_mr3420_v3_led_wan_red_get,
+};
+
+/*     WLAN    */
+static void tl_mr3420_v3_led_wlan_set(struct led_classdev *cdev, enum led_brightness brightness) {
+	if(brightness) tl_mr3420_v3_set_leds(tl_mr3420_v3_latch_state & TL_MR3420_V3_LED_WLAN);
+	else tl_mr3420_v3_set_leds(tl_mr3420_v3_latch_state | (~TL_MR3420_V3_LED_WLAN));
+}
+
+static enum led_brightness tl_mr3420_v3_led_wlan_get(struct led_classdev *cdev) {
+	return( (~(tl_mr3420_v3_latch_state | TL_MR3420_V3_LED_WLAN)) != 0 ?  LED_FULL : LED_OFF);
+}
+
+static struct led_classdev tl_mr3420_v3_led_wlan = {
+	.name = "tp-link:green:wlan",
+	.brightness_set = tl_mr3420_v3_led_wlan_set,
+	.brightness_get = tl_mr3420_v3_led_wlan_get,
+};
+
+
+/*     LAN1    */
+static void tl_mr3420_v3_led_lan1_set(struct led_classdev *cdev, enum led_brightness brightness) {
+	if(brightness) tl_mr3420_v3_set_leds(tl_mr3420_v3_latch_state & TL_MR3420_V3_LED_LAN1);
+	else tl_mr3420_v3_set_leds(tl_mr3420_v3_latch_state | (~TL_MR3420_V3_LED_LAN1));
+}
+
+static enum led_brightness tl_mr3420_v3_led_lan1_get(struct led_classdev *cdev) {
+	return( (~(tl_mr3420_v3_latch_state | TL_MR3420_V3_LED_LAN1)) != 0 ?  LED_FULL : LED_OFF);
+}
+
+static struct led_classdev tl_mr3420_v3_led_lan1 = {
+	.name = "tp-link:green:lan1",
+	.brightness_set = tl_mr3420_v3_led_lan1_set,
+	.brightness_get = tl_mr3420_v3_led_lan1_get,
+};
+
+
+/*     LAN2    */
+static void tl_mr3420_v3_led_lan2_set(struct led_classdev *cdev, enum led_brightness brightness) {
+	if(brightness) tl_mr3420_v3_set_leds(tl_mr3420_v3_latch_state & TL_MR3420_V3_LED_LAN2);
+	else tl_mr3420_v3_set_leds(tl_mr3420_v3_latch_state | (~TL_MR3420_V3_LED_LAN2));
+}
+
+static enum led_brightness tl_mr3420_v3_led_lan2_get(struct led_classdev *cdev) {
+	return( (~(tl_mr3420_v3_latch_state | TL_MR3420_V3_LED_LAN2)) != 0 ?  LED_FULL : LED_OFF);
+}
+
+static struct led_classdev tl_mr3420_v3_led_lan2 = {
+	.name = "tp-link:green:lan2",
+	.brightness_set = tl_mr3420_v3_led_lan2_set,
+	.brightness_get = tl_mr3420_v3_led_lan2_get,
+};
+
+
+/*     LAN3    */
+static void tl_mr3420_v3_led_lan3_set(struct led_classdev *cdev, enum led_brightness brightness) {
+	if(brightness) tl_mr3420_v3_set_leds(tl_mr3420_v3_latch_state & TL_MR3420_V3_LED_LAN3);
+	else tl_mr3420_v3_set_leds(tl_mr3420_v3_latch_state | (~TL_MR3420_V3_LED_LAN3));
+}
+
+static enum led_brightness tl_mr3420_v3_led_lan3_get(struct led_classdev *cdev) {
+	return( (~(tl_mr3420_v3_latch_state | TL_MR3420_V3_LED_LAN3)) != 0 ?  LED_FULL : LED_OFF);
+}
+
+static struct led_classdev tl_mr3420_v3_led_lan3 = {
+	.name = "tp-link:green:lan3",
+	.brightness_set = tl_mr3420_v3_led_lan3_set,
+	.brightness_get = tl_mr3420_v3_led_lan3_get,
+};
+
+
+/*     LAN4    */
+static void tl_mr3420_v3_led_lan4_set(struct led_classdev *cdev, enum led_brightness brightness) {
+	if(brightness) tl_mr3420_v3_set_leds(tl_mr3420_v3_latch_state & TL_MR3420_V3_LED_LAN4);
+	else tl_mr3420_v3_set_leds(tl_mr3420_v3_latch_state | (~TL_MR3420_V3_LED_LAN4));
+}
+
+static enum led_brightness tl_mr3420_v3_led_lan4_get(struct led_classdev *cdev) {
+	return( (~(tl_mr3420_v3_latch_state | TL_MR3420_V3_LED_LAN4)) != 0 ?  LED_FULL : LED_OFF);
+}
+
+static struct led_classdev tl_mr3420_v3_led_lan4 = {
+	.name = "tp-link:green:lan4",
+	.brightness_set = tl_mr3420_v3_led_lan4_set,
+	.brightness_get = tl_mr3420_v3_led_lan4_get,
+};
+
+
+static int tl_mr3420_v3_leds_probe(struct platform_device *pdev) {
+    int ret;
+	if( (ret = led_classdev_register(&pdev->dev, &tl_mr3420_v3_led_3g)) == 0) {
+	    if( (ret = led_classdev_register(&pdev->dev, &tl_mr3420_v3_led_wan_green)) == 0) {
+		if( (ret = led_classdev_register(&pdev->dev, &tl_mr3420_v3_led_wan_red)) == 0) {
+		    if( (ret = led_classdev_register(&pdev->dev, &tl_mr3420_v3_led_lan4)) == 0) {
+			if( (ret = led_classdev_register(&pdev->dev, &tl_mr3420_v3_led_lan3)) == 0) {
+			    if( (ret = led_classdev_register(&pdev->dev, &tl_mr3420_v3_led_lan2)) == 0) {
+				if( (ret = led_classdev_register(&pdev->dev, &tl_mr3420_v3_led_lan1)) == 0) {
+				    if( (ret = led_classdev_register(&pdev->dev, &tl_mr3420_v3_led_wlan)) == 0) {
+					tl_mr3420_v3_clr_leds();
+					return(0);
+				    }
+				    led_classdev_unregister(&tl_mr3420_v3_led_lan1);
+				}
+				led_classdev_unregister(&tl_mr3420_v3_led_lan2);
+			    }
+			    led_classdev_unregister(&tl_mr3420_v3_led_lan3);
+			}
+			led_classdev_unregister(&tl_mr3420_v3_led_lan4);
+		    }
+		    led_classdev_unregister(&tl_mr3420_v3_led_wan_red);
+		}
+		led_classdev_unregister(&tl_mr3420_v3_led_wan_green);
+	    }
+	    led_classdev_unregister(&tl_mr3420_v3_led_3g);
+	}
+	return(ret);
+}
+
+static int tl_mr3420_v3_leds_remove(struct platform_device *pdev) {
+	led_classdev_unregister(&tl_mr3420_v3_led_wlan);
+	led_classdev_unregister(&tl_mr3420_v3_led_lan1);
+	led_classdev_unregister(&tl_mr3420_v3_led_lan2);
+	led_classdev_unregister(&tl_mr3420_v3_led_lan3);
+	led_classdev_unregister(&tl_mr3420_v3_led_lan4);
+	led_classdev_unregister(&tl_mr3420_v3_led_wan_red);
+	led_classdev_unregister(&tl_mr3420_v3_led_wan_green);
+	led_classdev_unregister(&tl_mr3420_v3_led_3g);
+	return 0;
+}
+
+
+static struct platform_driver tl_mr3420_v3_leds_driver = {
+	.probe = tl_mr3420_v3_leds_probe,
+	.remove = tl_mr3420_v3_leds_remove,
+	.driver = {
+		.name = DRIVER_NAME,
+		.owner = THIS_MODULE,
+	},
+};
+
+
+
+//---------------------------------------------------------------
+static int __init tl_mr3420_v3_leds_init(void) {
+    return platform_driver_register(&tl_mr3420_v3_leds_driver);
+}
+
+static void __exit tl_mr3420_v3_leds_exit(void) {
+	platform_driver_unregister(&tl_mr3420_v3_leds_driver);
+}
+
+module_init(tl_mr3420_v3_leds_init);
+module_exit(tl_mr3420_v3_leds_exit);
+
+MODULE_DESCRIPTION("Some LEDs driver for TPLINK MR32420 v3");
+MODULE_AUTHOR("Jacek Trzcinski <jt@mgt.pl>");
+MODULE_LICENSE("GPL v2");
+MODULE_ALIAS("platform:" DRIVER_NAME);
diff --git a/target/linux/ar71xx/image/tp-link.mk b/target/linux/ar71xx/image/tp-link.mk
index 58ea1f3..d89a645 100644
--- a/target/linux/ar71xx/image/tp-link.mk
+++ b/target/linux/ar71xx/image/tp-link.mk
@@ -369,7 +369,17 @@ define Device/tl-mr3420-v2
     DEVICE_PROFILE := TLMR3420
     TPLINK_HWID := 0x34200002
 endef
-TARGET_DEVICES += tl-mr3020-v1 tl-mr3040-v1 tl-mr3040-v2 tl-mr3220-v1 tl-mr3220-v2 tl-mr3420-v1 tl-mr3420-v2
+
+define Device/tl-mr3420-v3
+    $(Device/tplink-4mlzma)
+    DEVICE_TITLE := TP-LINK TL-MR3420 v3
+    DEVICE_PACKAGES := kmod-usb-core kmod-usb2 kmod-usb-ledtrig-usbport kmod-leds-tl-mr3420-v3
+    BOARDNAME := TL-MR3420-v3
+    DEVICE_PROFILE := TLMR3420
+    TPLINK_HWID := 0x34200003
+endef
+TARGET_DEVICES += tl-mr3020-v1 tl-mr3040-v1 tl-mr3040-v2 tl-mr3220-v1 tl-mr3220-v2 tl-mr3420-v1 tl-mr3420-v2 tl-mr3420-v3
+
 
 define Device/tl-wr703n-v1
     $(Device/tplink-4mlzma)
diff --git a/target/linux/ar71xx/mikrotik/config-default b/target/linux/ar71xx/mikrotik/config-default
index e17b166..462af2d 100644
--- a/target/linux/ar71xx/mikrotik/config-default
+++ b/target/linux/ar71xx/mikrotik/config-default
@@ -82,6 +82,7 @@ CONFIG_ATH79_MACH_RBSXTLITE=y
 # CONFIG_ATH79_MACH_TL_MR13U is not set
 # CONFIG_ATH79_MACH_TL_MR3020 is not set
 # CONFIG_ATH79_MACH_TL_MR3X20 is not set
+# CONFIG_ATH79_MACH_TL_MR3420_V3 is not set
 # CONFIG_ATH79_MACH_TL_WA701ND_V2 is not set
 # CONFIG_ATH79_MACH_TL_WA7210N_V2 is not set
 # CONFIG_ATH79_MACH_TL_WA830RE_V2 is not set
diff --git a/target/linux/ar71xx/modules.mk b/target/linux/ar71xx/modules.mk
index 9ead8b4..49d74c7 100644
--- a/target/linux/ar71xx/modules.mk
+++ b/target/linux/ar71xx/modules.mk
@@ -53,6 +53,23 @@ endef
 $(eval $(call KernelPackage,leds-wndr3700-usb))
 
 
+define KernelPackage/leds-tl-mr3420-v3
+  SUBMENU:=$(LEDS_MENU)
+  TITLE:=TL-MR3420_V3 LED support
+  DEPENDS:=@TARGET_ar71xx
+  KCONFIG:=CONFIG_LEDS_TL_MR3420_V3
+  FILES:=$(LINUX_DIR)/drivers/leds/leds-tl-mr3420-v3.ko
+  AUTOLOAD:=$(call AutoLoad,60,leds-tl-mr3420-v3)
+endef
+
+define KernelPackage/leds-tl-mr3420-v3/description
+ Kernel module for some USB LEDs on the TPLINK MR3420 v3 board.
+endef
+
+$(eval $(call KernelPackage,leds-tl-mr3420-v3))
+
+
+
 define KernelPackage/spi-vsc7385
   SUBMENU:=$(SPI_MENU)
   TITLE:=Vitesse VSC7385 ethernet switch driver
diff --git a/target/linux/ar71xx/nand/config-default b/target/linux/ar71xx/nand/config-default
index 7f94781..afc1e76 100644
--- a/target/linux/ar71xx/nand/config-default
+++ b/target/linux/ar71xx/nand/config-default
@@ -48,6 +48,7 @@
 # CONFIG_ATH79_MACH_TL_MR13U is not set
 # CONFIG_ATH79_MACH_TL_MR3020 is not set
 # CONFIG_ATH79_MACH_TL_MR3X20 is not set
+# CONFIG_ATH79_MACH_TL_MR3420_V3 is not set
 # CONFIG_ATH79_MACH_TL_WA901ND is not set
 # CONFIG_ATH79_MACH_TL_WA901ND_V2 is not set
 # CONFIG_ATH79_MACH_TL_WDR3500 is not set
diff --git a/target/linux/ar71xx/patches-4.4/442-leds-tl-mr3420-v3-led-driver.patch b/target/linux/ar71xx/patches-4.4/442-leds-tl-mr3420-v3-led-driver.patch
new file mode 100644
index 0000000..62e033a
--- /dev/null
+++ b/target/linux/ar71xx/patches-4.4/442-leds-tl-mr3420-v3-led-driver.patch
@@ -0,0 +1,27 @@
+--- a/drivers/leds/Kconfig
++++ b/drivers/leds/Kconfig
+@@ -619,6 +619,13 @@
+ 	  This option enables support for the USB LED found on the
+ 	  NETGEAR WNDR3700 board.
+ 
++config LEDS_TL_MR3420_V3
++	tristate "TPLINK MR3420 v3 LEDs driver"
++	depends on LEDS_CLASS && ATH79_MACH_TL_MR3420_V3
++	help
++	 This option enables support for the non-directly gpio driven LEDs
++	 found on the TPLINIK MR3420 v3 board.
++
+ config LEDS_RB750
+ 	tristate "LED driver for the Mikrotik RouterBOARD 750"
+ 	depends on LEDS_CLASS && ATH79_MACH_RB750
+
+--- a/drivers/leds/Makefile
++++ b/drivers/leds/Makefile
+@@ -48,6 +48,7 @@
+ obj-$(CONFIG_LEDS_WM8350)		+= leds-wm8350.o
+ obj-$(CONFIG_LEDS_PWM)			+= leds-pwm.o
+ obj-${CONFIG_LEDS_WNDR3700_USB}		+= leds-wndr3700-usb.o
++obj-${CONFIG_LEDS_TL_MR3420_V3}		+= leds-tl-mr3420-v3.o
+ obj-$(CONFIG_LEDS_REGULATOR)		+= leds-regulator.o
+ obj-$(CONFIG_LEDS_INTEL_SS4200)		+= leds-ss4200.o
+ obj-$(CONFIG_LEDS_LT3593)		+= leds-lt3593.o
-- 
2.4.9

